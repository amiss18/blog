security:
        # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
              # Our user class and the algorithm we'll use to encode passwords
              # https://symfony.com/doc/current/security.html#c-encoding-the-user-s-password
        App\Entity\User: bcrypt


    providers:
        # https://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
        # In this example, users are stored via Doctrine in the database
        # To see the users at src/App/DataFixtures/ORM/LoadFixtures.php
        # To load users from somewhere else: https://symfony.com/doc/current/security/custom_provider.html
        database_users:
            entity: { class: App\Entity\User, property: username }


    firewalls:
            dev:
                pattern: ^/(_(profiler|wdt)|css|images|js)/
                security: false

            main:
                # this firewall applies to all URLs
                pattern: ^/

                # but the firewall does not require login on every page
                # denying access is done in access_control or in your controllers
                anonymous: true

                # This allows the user to login by submitting a username and password
                # Reference: https://symfony.com/doc/current/security/form_login_setup.html
                form_login:
                    # The route name that the login form submits to
                    check_path: app_login
                    # The name of the route where the login form lives
                    # When the user tries to access a protected page, they are redirected here
                    login_path: app_login
                    # Secure the login form against CSRF
                    # Reference: https://symfony.com/doc/current/security/csrf_in_login_form.html
                    csrf_token_generator: security.csrf.token_manager
                    # The page users are redirect to when there is no previous page stored in the
                    # session (for example when the users access directly to the login page).
                    default_target_path: home

                logout: ~
                    # The route name the user can go to in order to logout
#                    path: security_logout
#                    # The name of the route to redirect to after logging out
#                    target: home
            # https://symfony.com/doc/current/security/form_login_setup.html

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_ADMIN }

